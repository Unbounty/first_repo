const express = require('express');
const app = express();
app.use(express.json());

const PORT = 3000;

// Simulate a simple theater with seats 1 to 10
const seats = {};
for (let i = 1; i <= 10; i++) {
  seats[i] = {
    status: 'available', // available | locked | booked
    lockExpiresAt: null,
    lockTimer: null,
  };
}

const LOCK_TIMEOUT_MS = 30 * 1000; // 30 seconds

// Helper: Release lock after timeout
function releaseLock(seatNumber) {
  if (seats[seatNumber].status === 'locked') {
    console.log(`Auto-releasing lock for seat ${seatNumber}`);
    seats[seatNumber].status = 'available';
    seats[seatNumber].lockExpiresAt = null;
    seats[seatNumber].lockTimer = null;
  }
}

// API: Get all seats and status
app.get('/seats', (req, res) => {
  const seatStatus = {};
  Object.entries(seats).forEach(([num, seat]) => {
    seatStatus[num] = seat.status;
  });
  res.json(seatStatus);
});

// API: Lock a seat (simulate trying to book)
app.post('/seats/:seatNumber/lock', (req, res) => {
  const seatNumber = req.params.seatNumber;
  const seat = seats[seatNumber];
  if (!seat) {
    return res.status(404).json({ error: 'Seat not found' });
  }
  if (seat.status === 'available') {
    seat.status = 'locked';
    seat.lockExpiresAt = Date.now() + LOCK_TIMEOUT_MS;

    // Set timer to auto-release lock
    seat.lockTimer = setTimeout(() => releaseLock(seatNumber), LOCK_TIMEOUT_MS);

    return res.json({ message: `Seat ${seatNumber} locked for 30 seconds` });
  } else {
    return res.status(409).json({ error: `Seat ${seatNumber} is currently ${seat.status}` });
  }
});

// API: Confirm booking (only if seat is locked)
app.post('/seats/:seatNumber/book', (req, res) => {
  const seatNumber = req.params.seatNumber;
  const seat = seats[seatNumber];
  if (!seat) {
    return res.status(404).json({ error: 'Seat not found' });
  }

  if (seat.status === 'locked') {
    clearTimeout(seat.lockTimer);
    seat.status = 'booked';
    seat.lockExpiresAt = null;
    seat.lockTimer = null;
    return res.json({ message: `Seat ${seatNumber} successfully booked!` });
  } else if (seat.status === 'available') {
    return res.status(400).json({ error: 'Seat must be locked before booking' });
  } else {
    return res.status(409).json({ error: `Seat ${seatNumber} is already booked` });
  }
});

// API: Release lock manually (optional)
app.post('/seats/:seatNumber/release', (req, res) => {
  const seatNumber = req.params.seatNumber;
  const seat = seats[seatNumber];
  if (!seat) {
    return res.status(404).json({ error: 'Seat not found' });
  }

  if (seat.status === 'locked') {
    clearTimeout(seat.lockTimer);
    seat.status = 'available';
    seat.lockExpiresAt = null;
    seat.lockTimer = null;
    return res.json({ message: `Lock on seat ${seatNumber} released` });
  } else {
    return res.status(400).json({ error: `Seat ${seatNumber} is not locked` });
  }
});

app.listen(PORT, () => {
  console.log(`🎟️ Ticket booking server running on http://localhost:${PORT}`);
});
